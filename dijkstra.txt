#include <stdio.h>
int n;
void insertvalue(int arr[n][n])
{
    int i, j, val, value;
    for (i = 0; i < n; i++) {
        for (j = i; j < n; j++) {
            printf("enter whether edge is present between vertices %d -- %d 1- yes 0 - no", i, j);
            scanf("%d", &val);
            if (val == 1) {
                printf("enter edge value");
                scanf("%d", &value);
                arr[i][j] = value;
                arr[j][i] = value;
            } else {
                arr[i][j] = 0;
                arr[j][i] = 0;
            }
        }
    }
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            printf("%d ",arr[i][j]);
        }
        printf("\n");
    }
}
int minvalue(int value[],int visited[])
{
    int min = 999;
    int vertex;
    int i;
    for(i=0;i<n;i++)
    {
        if(visited[i]==0 && value[i] < min)
        {
            min = value[i];
            vertex = i;
        }
    }
    return vertex;
}

void djikstra(int arr[n][n])
{
    int i;
    int j;
    int value[n];
    int parent[n];
    int visited[n];
    for(i=0;i<n;i++)
    {
        value[i] = 999;
        parent[i] = -1;
        visited[i] = 0;
    }
    value[0] = 0;
    parent[0] = 0;
    for(i=0;i<n-1;i++)
    {
        int u = minvalue(value,visited);
        visited[u] = 1;
         
        for(j=0;j<n;j++)
        {
           if(arr[u][j] != 0 && visited[j]==0 && value[u]!=999 &&(value[u]+arr[u][j])<value[j]) 
           {
               value[j] = value[u]+arr[u][j];
               parent[j] = u;
           }
        }
    }
    
    for(i=0;i<n;i++)
    {
       printf("dist %d -- %d = %d",parent[i],i,arr[parent[i]][i]);
    }
       
}


int main() {
printf("enter no of vertices");
scanf("%d",&n);
int arr[n][n];
insertvalue(arr);
djikstra(arr);


    return 0;
} 

/*     OUTPUT

/tmp/p0HFLakE4x.o
enter no of vertices3
enter whether edge is present between vertices 0 -- 0 1- yes 0 - no0
enter whether edge is present between vertices 0 -- 1 1- yes 0 - no1
enter edge value3
enter whether edge is present between vertices 0 -- 2 1- yes 0 - no1
enter edge value5
enter whether edge is present between vertices 1 -- 1 1- yes 0 - no0
enter whether edge is present between vertices 1 -- 2 1- yes 0 - no3
enter whether edge is present between vertices 2 -- 2 1- yes 0 - no0
0 3 5 
3 0 0 
5 0 0 
dist 0 -- 0 = 0dist 0 -- 1 = 3dist 0 -- 2 = 5
*/